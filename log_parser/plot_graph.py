import matplotlib.pyplot as plt
import numpy as np
import math


def ceil_power_of_10(n):
    exp = math.log(n, 10)
    exp = math.ceil(exp)
    return 10**exp


def replace_abs_with_rel(arr):
    for i in range(0, len(arr)):
        arr[i] = (i, arr[i][1])


def generate_range(lst, steps):
    minimum = 0
    maximum = max(lst)
    step = ceil_power_of_10(max(lst)) / steps
    return np.arange(minimum, maximum + step, step)


steps_values = [
    5 * 4,
    5 * 2,
    5 * 2
]
# place from parser here
data = {
  "new":[
    [
      1551214338672.356,
      983
    ],
    [
      1551214339672.357,
      152
    ],
    [
      1551214340672.358,
      12
    ],
    [
      1551214341672.399,
      1017
    ],
    [
      1551214342868.291,
      50
    ],
    [
      1551214344868.293,
      382
    ],
    [
      1551214345868.373,
      692
    ],
    [
      1551214346868.375,
      170
    ],
    [
      1551214347868.376,
      406
    ],
    [
      1551214348868.377,
      196
    ],
    [
      1551214352444.301,
      277
    ],
    [
      1551214353444.306,
      506
    ],
    [
      1551214354444.307,
      350
    ],
    [
      1551214355444.308,
      99
    ],
    [
      1551214356444.31,
      107
    ],
    [
      1551214357445.197,
      139
    ],
    [
      1551214360648.369,
      229
    ],
    [
      1551214370443.422,
      590
    ],
    [
      1551214371443.423,
      247
    ],
    [
      1551214372443.424,
      12
    ],
    [
      1551214373768.371,
      193
    ],
    [
      1551214377084.299,
      190
    ],
    [
      1551214402696.463,
      450
    ],
    [
      1551214403696.464,
      192
    ],
    [
      1551214404696.465,
      30
    ],
    [
      1551214406172.189,
      98
    ],
    [
      1551214409436.166,
      101
    ]
  ],
  "rcv":[
    [
      1551214338672.356,
      410561
    ],
    [
      1551214339672.357,
      370062
    ],
    [
      1551214340672.358,
      358787
    ],
    [
      1551214341672.399,
      286872
    ],
    [
      1551214342868.291,
      368387
    ],
    [
      1551214343868.292,
      406301
    ],
    [
      1551214344868.293,
      234369
    ],
    [
      1551214345868.373,
      384723
    ],
    [
      1551214346868.375,
      456320
    ],
    [
      1551214347868.376,
      339049
    ],
    [
      1551214348868.377,
      409834
    ],
    [
      1551214349868.405,
      32735
    ],
    [
      1551214352444.301,
      273655
    ],
    [
      1551214353444.306,
      125612
    ],
    [
      1551214354444.307,
      411178
    ],
    [
      1551214355444.308,
      380800
    ],
    [
      1551214356444.31,
      54046
    ],
    [
      1551214357445.197,
      230709
    ],
    [
      1551214360648.369,
      226871
    ],
    [
      1551214361648.372,
      129
    ],
    [
      1551214370443.422,
      397001
    ],
    [
      1551214371443.423,
      356299
    ],
    [
      1551214372443.424,
      95700
    ],
    [
      1551214373768.371,
      192000
    ],
    [
      1551214377084.299,
      189000
    ],
    [
      1551214402696.463,
      387814
    ],
    [
      1551214403696.464,
      202981
    ],
    [
      1551214404696.465,
      79205
    ],
    [
      1551214406172.189,
      97000
    ],
    [
      1551214409436.166,
      101000
    ]
  ],
  "snd":[
    [
      1551214338672.356,
      410559
    ],
    [
      1551214339672.357,
      370064
    ],
    [
      1551214340672.358,
      358787
    ],
    [
      1551214341672.399,
      286872
    ],
    [
      1551214342868.291,
      368386
    ],
    [
      1551214343868.292,
      406301
    ],
    [
      1551214344868.293,
      234369
    ],
    [
      1551214345868.373,
      384723
    ],
    [
      1551214346868.375,
      456319
    ],
    [
      1551214347868.376,
      339050
    ],
    [
      1551214348868.377,
      409835
    ],
    [
      1551214349868.405,
      32735
    ],
    [
      1551214352444.301,
      273655
    ],
    [
      1551214353444.306,
      125611
    ],
    [
      1551214354444.307,
      411178
    ],
    [
      1551214355444.308,
      380801
    ],
    [
      1551214356444.31,
      54045
    ],
    [
      1551214357445.197,
      230710
    ],
    [
      1551214360648.369,
      226870
    ],
    [
      1551214361648.372,
      130
    ],
    [
      1551214370443.422,
      397000
    ],
    [
      1551214371443.423,
      356300
    ],
    [
      1551214372443.424,
      95700
    ],
    [
      1551214373768.371,
      192000
    ],
    [
      1551214377084.299,
      189000
    ],
    [
      1551214402696.463,
      387814
    ],
    [
      1551214403696.464,
      202978
    ],
    [
      1551214404696.465,
      79208
    ],
    [
      1551214406172.189,
      97000
    ],
    [
      1551214409436.166,
      101000
    ]
  ]
}


for key, value in data.items():
    replace_abs_with_rel(value)


newList = list(zip(*data['new']))
rcvList = list(zip(*data['rcv']))
sndList = list(zip(*data['snd']))

plt.subplot(311)
plt.title('Accepts/Second')
plt.plot(*zip(*data['new']))
plt.grid(True)
plt.xlabel('Time(s)')
plt.ylabel('Accepts')
plt.yticks(generate_range(newList[1], steps_values[0]))

plt.subplot(312)
plt.title('Reads/Seconds')
plt.plot(*zip(*data['rcv']))
plt.grid(True)
plt.xlabel('Time(s)')
plt.ylabel('Reads')
plt.yticks(generate_range(rcvList[1], steps_values[1]))

plt.subplot(313)
plt.title('Sends/Second')
plt.plot(*zip(*data['snd']))
plt.grid(True)
plt.xlabel('Time(s)')
plt.ylabel('Sends')
plt.yticks(generate_range(sndList[1], steps_values[2]))

plt.show()

